// integration_security_test.go
package handlers

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"moodtracker/db"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/go-chi/chi/v5"
	"github.com/jmoiron/sqlx"
)

// helper –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
func setupIntegration(t *testing.T) (handler http.Handler, mock sqlmock.Sqlmock, teardown func()) {
	// –º–æ–∫ DB
	sqlDB, m, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherRegexp))
	if err != nil {
		t.Fatalf("–Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ sqlmock: %v", err)
	}
	db.DB.DB = sqlx.NewDb(sqlDB, "postgres")
	// —Å–µ–∫—Ä–µ—Ç –¥–ª—è JWT
	os.Setenv("JWT_SECRET", "testsecret")

	// –∑–±–∏—Ä–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä —è–∫ —É main.go
	r := chi.NewRouter()
	r.Route("/auth", RegisterAuthRoutes)
	r.Route("/mood", RegisterMoodRoutes)
	r.Route("/user/telegram", RegisterTelegramRoutes)

	return r, m, func() { sqlDB.Close() }
}

// —Ä–æ–±–∏–º–æ POST /auth/login, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω
func doLogin(t *testing.T, handler http.Handler, mock sqlmock.Sqlmock, email string) string {
	// –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è DB: —Å–ø–æ—á–∞—Ç–∫—É SELECT
	rows := sqlmock.NewRows([]string{"id"}).AddRow("user-1")
	mock.ExpectQuery(`SELECT id FROM users WHERE email=\$1`).
		WithArgs(email).
		WillReturnRows(rows)
	// –Ω–µ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	// –ø—ñ–¥–≥–æ—Ç—É—î–º–æ –∑–∞–ø–∏—Ç
	payload := map[string]string{"email": email}
	data, _ := json.Marshal(payload)
	req := httptest.NewRequest(http.MethodPost, "/auth/login", bytes.NewBuffer(data))
	rec := httptest.NewRecorder()

	handler.ServeHTTP(rec, req)
	if rec.Code != http.StatusOK {
		t.Fatalf("Login: –æ—á—ñ–∫—É–≤–∞–≤ 200, –æ—Ç—Ä–∏–º–∞–≤ %d", rec.Code)
	}
	var resp struct {
		Token string `json:"token"`
	}
	if err := json.NewDecoder(rec.Body).Decode(&resp); err != nil {
		t.Fatalf("Login: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: %v", err)
	}
	return resp.Token
}

func Test_Security_Mood_NoToken(t *testing.T) {
	handler, _, teardown := setupIntegration(t)
	defer teardown()

	req := httptest.NewRequest(http.MethodPost, "/mood", nil)
	rec := httptest.NewRecorder()
	handler.ServeHTTP(rec, req)

	if rec.Code != http.StatusUnauthorized {
		t.Errorf("NoToken: –æ—á—ñ–∫—É–≤–∞–≤ 401, –æ—Ç—Ä–∏–º–∞–≤ %d", rec.Code)
	}
}

func Test_Security_Mood_InvalidToken(t *testing.T) {
	handler, _, teardown := setupIntegration(t)
	defer teardown()

	req := httptest.NewRequest(http.MethodGet, "/mood", nil)
	req.Header.Set("Authorization", "Bearer invalid.token.here")
	rec := httptest.NewRecorder()
	handler.ServeHTTP(rec, req)

	if rec.Code != http.StatusUnauthorized {
		t.Errorf("InvalidToken: –æ—á—ñ–∫—É–≤–∞–≤ 401, –æ—Ç—Ä–∏–º–∞–≤ %d", rec.Code)
	}
}

func Test_Security_Mood_WithValidToken(t *testing.T) {
	handler, mock, teardown := setupIntegration(t)
	defer teardown()

	// 1) –ª–æ–≥—ñ–Ω ‚Üí –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω
	token := doLogin(t, handler, mock, "test@example.com")

	// 2) –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –º–æ–∫ –Ω–∞ –≤—Å—Ç–∞–≤–∫—É mood
	mock.ExpectExec(`INSERT INTO mood`).
		WithArgs(sqlmock.AnyArg(), "user-1", sqlmock.AnyArg(), "üôÇ", "ok", sqlmock.AnyArg(), sqlmock.AnyArg()).
		WillReturnResult(sqlmock.NewResult(1, 1))

	// –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç
	payload := map[string]string{"icon": "üôÇ", "comment": "ok"}
	body, _ := json.Marshal(payload)
	req := httptest.NewRequest(http.MethodPost, "/mood", bytes.NewBuffer(body))
	req.Header.Set("Authorization", "Bearer "+token)
	rec := httptest.NewRecorder()
	handler.ServeHTTP(rec, req)

	if rec.Code != http.StatusCreated {
		t.Errorf("WithValidToken Mood: –æ—á—ñ–∫—É–≤–∞–≤ 201, –æ—Ç—Ä–∏–º–∞–≤ %d", rec.Code)
	}

	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("Mood mock expectations: %v", err)
	}
}

func Test_Security_Telegram_NoToken(t *testing.T) {
	handler, _, teardown := setupIntegration(t)
	defer teardown()

	req := httptest.NewRequest(http.MethodPost, "/user/telegram/register", nil)
	rec := httptest.NewRecorder()
	handler.ServeHTTP(rec, req)

	if rec.Code != http.StatusUnauthorized {
		t.Errorf("Telegram NoToken: –æ—á—ñ–∫—É–≤–∞–≤ 401, –æ—Ç—Ä–∏–º–∞–≤ %d", rec.Code)
	}
}

func Test_Security_Telegram_WithValidToken(t *testing.T) {
	handler, mock, teardown := setupIntegration(t)
	defer teardown()

	// –ª–æ–≥—ñ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞
	token := doLogin(t, handler, mock, "test2@example.com")

	// –º–æ–∫ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è telegram_chat_id
	mock.ExpectExec(`UPDATE users SET telegram_chat_id=\$1 WHERE id=\$2`).
		WithArgs(int64(7777), "user-1").
		WillReturnResult(sqlmock.NewResult(1, 1))

	// –∑–∞–ø–∏—Ç
	payload := map[string]int64{"chat_id": 7777}
	body, _ := json.Marshal(payload)
	req := httptest.NewRequest(http.MethodPost, "/user/telegram/register", bytes.NewBuffer(body))
	req.Header.Set("Authorization", "Bearer "+token)
	rec := httptest.NewRecorder()
	handler.ServeHTTP(rec, req)

	if rec.Code != http.StatusNoContent {
		t.Errorf("WithValidToken Telegram: –æ—á—ñ–∫—É–≤–∞–≤ 204, –æ—Ç—Ä–∏–º–∞–≤ %d", rec.Code)
	}

	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("Telegram mock expectations: %v", err)
	}
}
